// <auto-generated />
using System;
using JobPortal.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobPortal.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250730135334_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApplicationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationId");

                    b.HasIndex("JobId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Applications_Status");

                    b.HasIndex("UserId", "JobId")
                        .IsUnique()
                        .HasDatabaseName("IX_Applications_UserId_JobId");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.CV", b =>
                {
                    b.Property<int>("CvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CvId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("SkillsText")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CvId");

                    b.HasIndex("UserId");

                    b.ToTable("CVs", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.CVSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CvId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("CvId", "SkillId")
                        .IsUnique()
                        .HasDatabaseName("IX_CVSkills_CvId_SkillId");

                    b.ToTable("CVSkills", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SectorId")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId");

                    b.HasIndex("SectorId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.CompanyWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyWorkers", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Name = "Engineering"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Name = "Marketing"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Name = "Sales"
                        },
                        new
                        {
                            DepartmentId = 4,
                            Name = "Human Resources"
                        },
                        new
                        {
                            DepartmentId = 5,
                            Name = "Finance"
                        },
                        new
                        {
                            DepartmentId = 6,
                            Name = "Operations"
                        },
                        new
                        {
                            DepartmentId = 7,
                            Name = "Customer Service"
                        },
                        new
                        {
                            DepartmentId = 8,
                            Name = "Research & Development"
                        });
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Favorite", b =>
                {
                    b.Property<int>("FavId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FavId"));

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId", "JobId")
                        .IsUnique()
                        .HasDatabaseName("IX_Favorites_UserId_JobId");

                    b.ToTable("Favorites", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("SalaryMax")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("SalaryMin")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("IX_Jobs_CompanyId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Jobs_CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.JobSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("JobId", "SkillId")
                        .IsUnique()
                        .HasDatabaseName("IX_JobSkills_JobId_SkillId");

                    b.ToTable("JobSkills", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SectorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors", (string)null);

                    b.HasData(
                        new
                        {
                            SectorId = 1,
                            Name = "Technology"
                        },
                        new
                        {
                            SectorId = 2,
                            Name = "Healthcare"
                        },
                        new
                        {
                            SectorId = 3,
                            Name = "Finance"
                        },
                        new
                        {
                            SectorId = 4,
                            Name = "Education"
                        },
                        new
                        {
                            SectorId = 5,
                            Name = "Manufacturing"
                        },
                        new
                        {
                            SectorId = 6,
                            Name = "Retail"
                        },
                        new
                        {
                            SectorId = 7,
                            Name = "Consulting"
                        },
                        new
                        {
                            SectorId = 8,
                            Name = "Government"
                        });
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills", (string)null);

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            Name = "C#"
                        },
                        new
                        {
                            SkillId = 2,
                            Name = "JavaScript"
                        },
                        new
                        {
                            SkillId = 3,
                            Name = "Python"
                        },
                        new
                        {
                            SkillId = 4,
                            Name = "Java"
                        },
                        new
                        {
                            SkillId = 5,
                            Name = "TypeScript"
                        },
                        new
                        {
                            SkillId = 6,
                            Name = "PHP"
                        },
                        new
                        {
                            SkillId = 7,
                            Name = "Go"
                        },
                        new
                        {
                            SkillId = 8,
                            Name = "Ruby"
                        },
                        new
                        {
                            SkillId = 9,
                            Name = "React"
                        },
                        new
                        {
                            SkillId = 10,
                            Name = "Vue.js"
                        },
                        new
                        {
                            SkillId = 11,
                            Name = "Angular"
                        },
                        new
                        {
                            SkillId = 12,
                            Name = "Node.js"
                        },
                        new
                        {
                            SkillId = 13,
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            SkillId = 14,
                            Name = "Django"
                        },
                        new
                        {
                            SkillId = 15,
                            Name = "Spring Boot"
                        },
                        new
                        {
                            SkillId = 16,
                            Name = "SQL"
                        },
                        new
                        {
                            SkillId = 17,
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            SkillId = 18,
                            Name = "MySQL"
                        },
                        new
                        {
                            SkillId = 19,
                            Name = "MongoDB"
                        },
                        new
                        {
                            SkillId = 20,
                            Name = "Redis"
                        },
                        new
                        {
                            SkillId = 21,
                            Name = "AWS"
                        },
                        new
                        {
                            SkillId = 22,
                            Name = "Azure"
                        },
                        new
                        {
                            SkillId = 23,
                            Name = "Docker"
                        },
                        new
                        {
                            SkillId = 24,
                            Name = "Kubernetes"
                        },
                        new
                        {
                            SkillId = 25,
                            Name = "CI/CD"
                        },
                        new
                        {
                            SkillId = 26,
                            Name = "Project Management"
                        },
                        new
                        {
                            SkillId = 27,
                            Name = "Team Leadership"
                        },
                        new
                        {
                            SkillId = 28,
                            Name = "Communication"
                        },
                        new
                        {
                            SkillId = 29,
                            Name = "Problem Solving"
                        },
                        new
                        {
                            SkillId = 30,
                            Name = "Agile/Scrum"
                        });
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Application", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.CV", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.User", "User")
                        .WithMany("CVs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.CVSkill", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.CV", "CV")
                        .WithMany("CVSkills")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.Skill", "Skill")
                        .WithMany("CVSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Company", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.Sector", "Sector")
                        .WithMany("Companies")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.CompanyWorker", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.Company", "Company")
                        .WithMany("CompanyWorkers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.Department", "Department")
                        .WithMany("CompanyWorkers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.User", "User")
                        .WithMany("CompanyWorkers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Favorite", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.Job", "Job")
                        .WithMany("Favorites")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Job", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.User", "Creator")
                        .WithMany("CreatedJobs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.Department", "Department")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.JobSkill", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.Job", "Job")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortal.Api.Models.Entities.Skill", "Skill")
                        .WithMany("JobSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.User", b =>
                {
                    b.HasOne("JobPortal.Api.Models.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.CV", b =>
                {
                    b.Navigation("CVSkills");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Company", b =>
                {
                    b.Navigation("CompanyWorkers");

                    b.Navigation("Jobs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Department", b =>
                {
                    b.Navigation("CompanyWorkers");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Job", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Favorites");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Sector", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.Skill", b =>
                {
                    b.Navigation("CVSkills");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("JobPortal.Api.Models.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CVs");

                    b.Navigation("CompanyWorkers");

                    b.Navigation("CreatedJobs");

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
